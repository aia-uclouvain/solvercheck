package be.uclouvain.solvercheck.generators;

import be.uclouvain.solvercheck.core.data.Assignment;
import be.uclouvain.solvercheck.core.data.Domain;
import be.uclouvain.solvercheck.core.data.Operator;
import be.uclouvain.solvercheck.core.data.PartialAssignment;
import org.quicktheories.core.Gen;
import org.quicktheories.core.RandomnessSource;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;

import static org.quicktheories.generators.SourceDSL.integers;
import static org.quicktheories.generators.SourceDSL.lists;

/**
 * This class provides utility method to create generators that will be used
 * to generate fuzzing data in the various test cases.
 */
public final class Generators {

    /** The default minimum number of variables in (partial) assignments. */
    private static final int DEFAULT_NB_VARS_MIN = 0;
    /** The default maximum number of variables in (partial) assignment. */
    private static final int DEFAULT_NB_VARS_MAX = 5;

    /** The default maximum number of values in the domains. */
    private static final int DEFAULT_NB_VAL_MAX = 10;

    /** the default minimum number of lines in the generated tables. */
    private static final int DEFAULT_NB_LINES_MIN = 0;
    /** the default maximum number of lines in the generated tables. */
    private static final int DEFAULT_NB_LINES_MAX = 5;

    /** the default minimum value assignable to some variable. */
    private static final int DEFAULT_VALUE_MIN = Integer.MIN_VALUE;
    /** the default maximum value assignable to some variable. */
    private static final int DEFAULT_VALUE_MAX = Integer.MAX_VALUE;

    /**
     * Utility class has no public constructor.
     */
    private Generators() { }

    // --------- LISTS --------------------------------------------------------

    /**
     * Creates a generator which creates a list of `n` items all generated by
     * the `values` generator.
     *
     * @param n the number of items to generate
     * @param values the generator which produces random values to populate
     *               the list
     * @param <T> the type of the values generated by the `values` generator
     * @return a new generator that produces random lists of n element, all
     * of which have been pseudo-randomly generated by the `values` generator.
     */
    public static <T> Gen<List<T>> listsOf(final int n, final Gen<T> values) {
        return lists().of(values).ofSize(n);
    }

    /**
     * Creates a generator which creates a list of between `from` and `to`
     * items all generated by the `values` generator.
     *
     * @param from the minimum number of items to generate
     * @param to the maximum number of items to generate
     * @param values the generator which produces random values to populate
     *               the list
     * @param <T> the type of the values generated by the `values` generator
     * @return a new generator that produces random lists of n element, all
     * of which have been pseudo-randomly generated by the `values` generator.
     */
    public static <T> Gen<List<T>> listsOf(
            final int from,
            final int to,
            final Gen<T> values) {

        return lists().of(values).ofSizeBetween(from, to);
    }

    /**
     * Creates a generator which creates a list of &lt;= `n` items all
     * generated by
     * the `values` generator.
     *
     * @param n the maximum number of items to generate
     * @param values the generator which produces random values to populate
     *               the list
     * @param <T> the type of the values generated by the `values` generator
     * @return a new generator that produces random lists of &lt;= n element,
     * all of which have been pseudo-randomly generated by the `values`
     * generator.
     */
    public static <T> Gen<List<T>> listsOfUpTo(
            final int n,
            final Gen<T> values) {

        return listsOf(0, n, values);
    }

    // --------- SETS ---------------------------------------------------------
    /**
     * Creates a generator which creates a set of &lt;= `n` items all
     * generated by the `values` generator.
     *
     * @param n the maximum number of items to generate
     * @param values the generator which produces random values to populate
     *               the list
     * @param <T> the type of the values generated by the `values` generator
     * @return a new generator that produces random sets of &lt;= n element, all
     * of which have been pseudo-randomly generated by the `values` generator.
     */
    public static <T> Gen<Set<T>> setsOfUpTo(final int n, final Gen<T> values) {
        return listsOfUpTo(n, values).map(toSet());
    }

    /**
     * A simple mapper to map generators of lists of T to generators of sets
     * of T.
     *
     * @param <T> the type of value held in the container
     * @return a function that turns a list into a set
     */
    public static <T> Function<List<T>, Set<T>> toSet() {
        return HashSet::new;
    }


    // --------- OPERATORS ----------------------------------------------------
    /**
     * @return  generator pseudo-randomly returns one of the existing operators
     */
    public static Gen<Operator> operators() {
        return integers()
                .between(0, Operator.values().length - 1)
                .map(i -> Operator.values()[i]);
    }

    // --------- DOMAINS ------------------------------------------------------

    /**
     * @return a builder meant to act as a micro DSL to instantiate
     * generators that produce random domains.
     */
    public static GenDomainBuilder domains() {
        return new GenDomainBuilder();
    }

    // --------- PARTIAL-ASSIGNMENT -------------------------------------------
    /**
     * @return a builder meant to act as a micro DSL to instantiate
     * generators that produce random partial assignments.
     */
    public static GenPartialAssignmentBuilder partialAssignments() {
        return new GenPartialAssignmentBuilder();
    }

    // --------- ASSIGNMENT ---------------------------------------------------
    /**
     * @return a builder meant to act as a micro DSL to instantiate
     * generators that produce random assignments.
     */
    public static GenAssignmentBuilder assignments() {
        return new GenAssignmentBuilder();
    }

    // --------- TABLES -------------------------------------------------------
    /**
     * @return a builder meant to act as a micro DSL to instantiate
     * generators that produce random table constraints.
     */
    public static GenTableBuilder tables() {
        return new GenTableBuilder();
    }

    // --------- BUILDERS -----------------------------------------------------

    /**
     * This abstract class serves as a basis for the implementation of
     * fluent generator builders. It makes the API much more fluent, by letting
     * any generator builder be an adapter to some actual generator. This
     * way, the builders can be used in lieu of the generator they are meant
     * to create. Hence, an user api never has to explicitly call the `build`
     * method.
     *
     * @param <T> the type of the objects to generate.
     */
    private abstract static class GenBuilder<T> implements Gen<T> {
        /** The actual generator used to produce some values of type T. */
        private Gen<T> generator = null;

        /** {@inheritDoc} */
        public final T generate(final RandomnessSource in) {
            if (generator == null) {
                generator = build();
            }
            return generator.generate(in);
        }

        /**
         * Returns the actual generator instance, based on the current
         * configuration state.
         *
         * @return the actual generator.
         */
        protected abstract Gen<T> build();
    }

    /**
     * A builder which acts as a micro DSL to produce generators of domains.
     */
    public static final class GenDomainBuilder extends GenBuilder<Domain> {
        /** the maximum number of different values a domain should contain. */
        private int nbValMax = DEFAULT_NB_VAL_MAX;
        /** the lowest value that can be contained in the domain. */
        private int minValue = DEFAULT_VALUE_MIN;
        /** the highest value that can be contained in the domain. */
        private int maxValue = DEFAULT_VALUE_MAX;

        /**
         * Sets the size range of the generated domains (from 0, to n).
         *
         * @param n the maximum number of different values a generated
         *           domain should hold
         * @return this
         */
        public GenDomainBuilder ofSizeUpTo(final int n) {
            nbValMax = n;

            return this;
        }

        /**
         * Sets the values range of the generated domains.
         *
         * @param from the minimum value that a generated domain can hold
         * @param to the maximum value that a generated domain can hold
         * @return this
         */
        public GenDomainBuilder withValuesBetween(final int from, final int to) {
            minValue = from;
            maxValue = to;

            return this;
        }

        /**
         * {@inheritDoc}
         *
         * @return a domain generator that corresponds to the configuration
         * specified with the other methods.
         */
        @Override
        public Gen<Domain> build() {
            return lists().of(integers().between(minValue, maxValue))
                    .ofSizeBetween(0, nbValMax)
                    .map(set -> Domain.from(new HashSet<>(set)));
        }
    }

    /**
     * A builder which acts as a micro DSL to produce generators of partial
     * assignments.
     */
    public static final class GenPartialAssignmentBuilder
            extends GenBuilder<PartialAssignment> {

        /**
         * The builder to produce the domains of the various variables in
         * the partial assignment.
         */
        private final GenDomainBuilder domainBuilder = domains();
        /**
         * The minimum number of variables in the partial assignment.
         * (default: 0)
         */
        private int nbVarsMin = DEFAULT_NB_VARS_MIN;
        /**
         * The maxumum number of variables in the partial assignment.
         * (default: 5)
         */
        private int nbVarsMax = DEFAULT_NB_VARS_MAX;

        /**
         * Tells that generator will produce partial assignments having
         * exactly n variables.
         *
         * @param n the number of variables in the generated partial assignments
         * @return this
         */
        public GenPartialAssignmentBuilder withVariables(final int n) {
            this.nbVarsMin = n;
            this.nbVarsMax = n;
            return this;
        }

        /**
         * Tells that generator will produce partial assignments having
         * &lt;= n variables.
         *
         * @param n an upper bound on the number of variables in the generated
         *          partial assignments
         * @return this
         */
        public GenPartialAssignmentBuilder withUpToVariables(final int n) {
            this.nbVarsMin = 0;
            this.nbVarsMax = n;
            return this;
        }
        /**
         * Tells that generator will produce partial assignments having
         * between from and to variables.
         *
         * @param from a lower bound on the number of variables in the
         *             generated partial assignments
         * @param to an upper bound on the number of variables in the generated
         *          partial assignments
         * @return this
         */
        public GenPartialAssignmentBuilder withVariablesBetween(
                final int from,
                final int to) {
            this.nbVarsMin = from;
            this.nbVarsMax = to;
            return this;
        }

        /**
         * Sets the size range of the generated domains.
         *
         * @param n an upper bound on the size of the generated domains in the
         *           partial assignments
         * @return this
         */
        public GenPartialAssignmentBuilder withDomainsOfSizeUpTo(final int n) {
            domainBuilder.ofSizeUpTo(n);
            return this;
        }

        /**
         * Sets the value range of the generated domains.
         * @param from a lower bound on the values of the generated domains in
         *            the partial assignments
         * @param to an upper bound on the values of the generated domains in
         *          the partial assignments
         * @return this
         */
        public GenPartialAssignmentBuilder withValuesRanging(
                final int from,
                final int to) {
            domainBuilder.withValuesBetween(from, to);
            return this;
        }

        /**
         * {@inheritDoc}
         *
         * @return a partial assignment generator that corresponds to the
         * configuration specified with the other methods.
         */
        @Override
        public Gen<PartialAssignment> build() {
            return lists().of(domainBuilder.build())
                    .ofSizeBetween(nbVarsMin, nbVarsMax)
                    .map(lst -> PartialAssignment.from(lst));
        }
    }

    /**
     * A builder which acts as a micro DSL to produce generators of partial
     * assignments.
     */
    public static final class GenAssignmentBuilder
            extends GenBuilder<Assignment> {

        /**
         * The minimum number of variables in the assignment. (default: 0)
         */
        private int nbVarsMin = DEFAULT_NB_VARS_MIN;
        /**
         * The maximum number of variables in the assignment. (default: 5)
         */
        private int nbVarsMax = DEFAULT_NB_VARS_MAX;
        /**
         * The minimum value of a variable in the assignment. (default: -10)
         */
        private int valueMin  = DEFAULT_VALUE_MIN;
        /**
         * The maximum value of a variable in the assignment. (default: 10)
         */
        private int valueMax  = DEFAULT_VALUE_MAX;

        /**
         * Tells that generator will produce assignments having exactly n
         * variables.
         *
         * @param n the number of variables in the generated assignments
         * @return this
         */
        public GenAssignmentBuilder withVariables(final int n) {
            this.nbVarsMin = n;
            this.nbVarsMax = n;
            return this;
        }
        /**
         * Tells that generator will produce assignments having &lt;= n
         * variables.
         *
         * @param n the maximum number of variables in the generated assignments
         * @return this
         */
        public GenAssignmentBuilder withUpToVariables(final int n) {
            this.nbVarsMin = 0;
            this.nbVarsMax = n;
            return this;
        }
        /**
         * Tells that generator will produce assignments having between from
         * and to variables.
         *
         * @param from a lower bound on the number of variables in the
         *             generated assignments
         * @param to an upper bound on the number of variables in the generated
         *          assignments
         * @return this
         */
        public GenAssignmentBuilder withVariablesBetween(
                final int from,
                final int to) {
            this.nbVarsMin = from;
            this.nbVarsMax = to;
            return this;
        }
        /**
         * Tells that in the generated assignments, the values assigned to
         * variables, will range between `from` and `to`.
         *
         * @param from a lower bound on the value of variables in the
         *             generated assignments
         * @param to an upper bound on the value of variables in the generated
         *          assignments
         * @return this
         */
        public GenAssignmentBuilder withValuesRanging(
                final int from,
                final int to) {
            this.valueMin = from;
            this.valueMax = to;
            return this;
        }

        /**
         * {@inheritDoc}
         *
         * @return an assignment generator that corresponds to the
         * configuration specified with the other methods
         */
        @Override
        public Gen<Assignment> build() {
            return lists().of(integers().between(valueMin, valueMax))
                    .ofSizeBetween(nbVarsMin, nbVarsMax)
                    .map(Assignment::from);
        }
    }

    /**
     * A builder which acts as a micro DSL to produce generators of table
     * constraints.
     */
    public static final class GenTableBuilder
            extends GenBuilder<List<Assignment>> {

        /** the minimum number of lines in the generated tables. */
        private int nbLinesMin = DEFAULT_NB_LINES_MIN;
        /** the maximum number of lines in the generated tables. */
        private int nbLinesMax = DEFAULT_NB_LINES_MAX;
        /**
         * A generator to whom we delegate the actual creation of assignments.
         */
        private final GenAssignmentBuilder builder = new GenAssignmentBuilder()
                .withVariables(DEFAULT_NB_VARS_MIN);

        /**
         * Tells that generator will produce tables made of assignments having
         * exactly n variables.
         *
         * @param n the number of variables in the generated tables
         * @return this
         */
        public GenTableBuilder withVariables(final int n) {
            builder.withVariables(n);
            return this;
        }

        /**
         * Tells that in the generated table, the values assigned to
         * variables, will range between `from` and `to`.
         *
         * @param from a lower bound on the value of variables in any of the
         *             generated assignments
         * @param to an upper bound on the value of variables in any of the
         *           generated assignments
         * @return this
         */
        public GenTableBuilder withValuesRanging(
                final int from,
                final int to) {
            builder.withValuesRanging(from, to);
            return this;
        }

        /**
         * Tells that the generated tables will have exactly `n` lines.
         *
         * @param n the number of lines in the generated tables
         * @return this
         */
        public GenTableBuilder withLines(final int n) {
            nbLinesMin = n;
            nbLinesMax = n;
            return this;
        }
        /**
         * Tells that the generated tables will have up to `n` lines.
         *
         * @param n the maximum number of lines in the generated tables
         * @return this
         */
        public GenTableBuilder withUpToLines(final int n) {
            nbLinesMin = 0;
            nbLinesMax = n;
            return this;
        }
        /**
         * Tells that the number of lines in the generated tables range
         * between `from` and `to`.
         *
         * @param from the minimum number of lines in the generated tables
         * @param to the maximum number of lines in the generated tables
         *
         * @return this
         */
        public GenTableBuilder withLinesRanging(
                final int from,
                final int to) {
            nbLinesMin = from;
            nbLinesMax = to;
            return this;
        }

        /**
         * {@inheritDoc}
         *
         * @return an table constraints generator that corresponds to the
         * configuration specified with the other methods.
         */
        @Override
        public Gen<List<Assignment>> build() {
            return lists()
                    .of(builder.build())
                    .ofSizeBetween(nbLinesMin, nbLinesMax);
        }
    }
}
