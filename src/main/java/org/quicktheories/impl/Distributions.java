package org.quicktheories.impl;

import org.quicktheories.core.Gen;
import org.quicktheories.core.Strategy;

/**
 * This class basically exposes a public API to instanciate specific
 * distributions of values when given a generator (boundarySkewed, random,
 * forced). Whichones are package private in the original `Quicktheories`
 * project.
 *
 * Without the addition of this API, it would simply be impossible to
 * manipulate such distributions of values from the SolverCheck classes.
 */
public final class Distributions {

    /** Utility classes do not expose a public constructor. */
    private Distributions() { }

    /**
     * Creates a new distribution of objects T which visits (in order) any
     * likely shrink target, minima and maxima before switching to a random
     * distribution.
     *
     * @param config a Strategy (the configuration of the underlying
     *               QuickTheories layer.
     * @param generator the generator used to produce the values appearing in
     *                  the resulting distribution.
     * @param <T> the type of the generated values.
     * @return A boundary skewed distribution of the objects generated by
     * `generator`.
     */
    public static <T> Distribution<T> boundarySkewed(
            final Strategy config,
            final Gen<T> generator) {
        return new BoundarySkewedDistribution<>(config, generator);
    }

    /**
     * Creates a new distribution of objects T which visits the values
     * produced by `generator` according to some pseudo-random order.
     *
     * @param config a Strategy (the configuration of the underlying
     *               QuickTheories layer.
     * @param generator the generator used to produce the values appearing in
     *                  the resulting distribution.
     * @param <T> the type of the generated values.
     * @return A random distribution of the objects generated by `generator`.
     */
    public static <T> Distribution<T> random(
            final Strategy config,
            final Gen<T> generator) {
        return new RandomDistribution<>(config, generator);
    }

    /**
     * Creates a new distribution of objects T which visits the values
     * produced by `generator` according to some forced order.
     *
     * @param config a Strategy (the configuration of the underlying
     *               QuickTheories layer.
     * @param generator the generator used to produce the values appearing in
     *                  the resulting distribution.
     * @param forced the basic sequence of elements being generated.
     * @param <T> the type of the generated values.
     * @return A forced distribution of the objects generated by `generator`.
     */
    public static <T> Distribution<T> forced(
            final Strategy config,
            final Gen<T> generator,
            final long[] forced) {
        return new ForcedDistribution<>(config, generator, forced);
    }

    /**
     * Utility method to pick one (the next) value from some given
     * distribution of objects T.
     *
     * @param distribution the distribution from which to pick a value.
     * @param <T> the type of the returned value.
     * @return one value chosen according to the given distribution.
     */
    public static <T> T nextValue(final Distribution<T> distribution) {
        return distribution.generate().value();
    }

}
